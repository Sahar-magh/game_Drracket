          
#lang racket

;;;;;;;;;;;;;;;;;;;;;;; Q1 ;;;;;;;;;;;;;;;;;;;;;;;;;;

(struct factory (consomation production cout));;pair pair float

(struct chaine (enter fact-list));;pair list_de_factory

;;;;;;;;;;;;;;;;;;;;;;; AFFICHAGE ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (aff-fact fact)
  (printf "consomation : " )
  (if (null? (factory-consomation fact))
      (printf "aucune consomation")
      (begin (write (cdr (factory-consomation fact)))
             (printf " de ")
             (printf (car (factory-consomation fact)))))
  ;;(write (cdr (factory-consomation fact)))
  ;;(printf " de " )
  ;;(printf (car (factory-consomation fact)))
  (printf "\n")
  (printf "production : ")
  (write (cdr (factory-production fact)))
  (printf " de " )
  (printf (car (factory-production fact)))
  (printf "\n")
  (printf "cout : ")
  (write (factory-cout fact) )
  (printf "\n"))

(define (aff-enter e)
  (printf "entrer : ")
  (write (cdr e))
  (printf " de ")
  (printf (car e))
  (printf "\n")
  (printf "\n"))

(define (aff-fact2 lst i n)
  (if (null? lst)
      (printf "end")
      (begin (printf "factory ") (write (add1 i)) (printf "/") (write n) (printf " : \n") (aff-fact (car lst)) (printf "\n")
                           (aff-fact2 (cdr lst) (add1 i) n))))

(define (aff-chaine c)
  (aff-enter (chaine-enter c))
  (aff-fact2 (chaine-fact-list c) 0 (length (chaine-fact-list c))))
 

;;;;;;;;;;;;;;;;;;;;;;; Q3 ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (factory-null? fact)
  (and (null? (factory-consomation fact))
       (null? (factory-production fact)))) 

(define (test-coherance-rec? enter list)
  (cond [(null? list) #t]
        [(not (equal? enter (factory-consomation (car list)))) #f]
        [else (test-coherance-rec? (factory-production (car list)) (cdr list))]))

;;test si la chaine de production est bien def
(define (test-coherance? file)
  (cond [(factory-null? (car (chaine-fact-list file))) #t]
        [(not(equal? (chaine-enter file) (factory-consomation (car (chaine-fact-list file))))) #f]
        [else (test-coherance-rec? (chaine-enter file) (chaine-fact-list file))]))
        
(define f1 (factory (cons "a" 1) (cons "b" 1) 5))
(define f2 (factory (cons "b" 1) (cons "c" 1) 15))
(define f3 (factory (cons "c" 1) (cons "d" 1) 5))

(define fnull (factory null null 0))
;;(factory-null? fnull) -> true
;;(factory-null? f1) -> false

(define c1 (chaine (cons "a" 1) (list f1 f2 f3)))
(define cnull (chaine (cons "a" 1) (list fnull)))
(define c2 (chaine (cons "b" 1) (list f1 f2 f3)))
(define c3 (chaine (cons "a" 1) (list f1 f3 f2)))
;;(chaine-enter c1)
;;(chaine-fact-list c1)

;;(test-coherance? c1) -> true
;;(test-coherance? cnull) ;;-> true
;;(test-coherance? c2) -> false
;;(test-coherance? c3) -> false


;;;;;;;;;;;;;;;;;;;;;;; Q2 ;;;;;;;;;;;;;;;;;;;;;;;;;;



;;(define src (file->list "/net/i/cnis/projetS6/Schemeprojet/projets6-fact-4423/src.txt"))        
(define src-lv1 (file->list "/net/i/cnis/projetS6/Schemeprojet/projets6-fact-4423/src_lv1.txt"))

;;(/ (length src-lv1) 6)
(define c-test (chaine (cons "Bread" 1) null))
;;(chaine-enter c-test)
;;(chaine-fact-list c-test)


;;Convertit une list en une chaine de carac !!!!!!! ATTENTION !!!!! ne fonctionne que pour des fatory de niveau 1
(define (trad s)
  (cond [(null? s) null]
        [(and (pair? s) (= (length s) 1) (not(number? (car s)))) (symbol->string (car s))]
        [(and (pair? s) (= (length s) 1) (number? (car s))) (car s)]
        [(number? s) s]
        [else (symbol->string s)]
        ))

(define (convert sl)
  (map trad sl))

(define (string->consomation s);;Marche aussi pour les productions
  (string-split s "="))


(define (trans-fact l)
  (factory (string->consomation (car l)) (string->consomation (cadr l)) (caddr l)))

(define (traduction l)
  (trans-fact (convert l)))

;;Exemples (penser à decommenter src)
;;(list (car src) (caddr src) (car (cdr (cddddr src))))
;;(convert (list (car src) (caddr src) (car (cdr (cddddr src)))))
;;(trans-fact (convert (list (car src) (caddr src) (car (cdr (cddddr src))))))
;;(define test (trans-fact (convert (list (car src) (caddr src) (car (cdr (cddddr src)))))))
;;(factory-consomation test)
;;(factory-production test)
;;(factory-cout test)
;;(traduction (list (car src) (caddr src) (car (cdr (cddddr src)))))


(define (parcer src n file);;quelque petit probleme avec les [] mais sinon sa marche
  (if (= 0 n)
      file
      (parcer (cdr (cdr (cddddr src))) (sub1 n)
              (chaine (chaine-enter file) (flatten (list (traduction (list (car src) (caddr src) (car (cdr (cddddr src))))) (chaine-fact-list file) ))))))


(define test-parcer (parcer src-lv1 (/ (length src-lv1) 6) c-test))
;;(aff-chaine test-parcer)


;;;;;;;;;;;;;;;;;Q4;;;;;;;;;;;;

;;test si on peut ajouter la factory dans une liste de la chaine de production
;; et la rajoute si c'est possible
;; Elle prend en argument une factory, une liste de chaines et le gold
;; Elle retourne un booleen et la liste de chaine modifiée 

(define (add-end-rec factory chaines gold)
  (if (null? chaines)
     (list #f '())
     (if (and (equal? (car(factory-production (last (car chaines)))) (car(factory-consomation factory)))
           (>= (cdr (factory-production (last (car chaines)))) (cdr (factory-consomation factory)))
           (>= gold (factory-cout factory)))
       (list #t (cons (append (car chaines) (list factory))(cdr chaines)))
       (list (and #t (car (add-end-rec factory (cdr chaines) gold))) (cons (car chaines) (cdr (add-end-rec factory (cdr chaines) gold)))))))


;;;;;;;;;;;;;;;;;;;;;;REGLE 1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cette fonction effectue le tour du jeu
;; elle modifie le gold et la chaine de production 

(define (tour-jeu-r1  gold achat chaines)
  (begin (- gold (factory-cout achat)) (add-end-rec achat chaines)))


;;;;;;;;;;;TEST;;;;;;;;;;;;;;


(define gold 50)

(define fact1 (factory (cons "a" 2) (cons "b" 3) 55))
(define fact2 (factory null (cons "a" 2) 40))
(define fact4 (factory (cons "b" 3) (cons "g" 4) 39))

(define addfact (factory (cons "b" 3 ) (cons "c" 1) 5))
(define addfact2 (factory (cons "g" 4 ) (cons "c" 1) 5))
(define addfact3 (factory (cons "c" 1) (cons "d" 4) 1))

(define chaine9 (list(list fact2 fact1) (list fact2 fact1 fact4)))



(add-end-rec addfact chaine9 gold)

(define (affiche-rec chaine )
  (if (null? chaine)
      null
      (begin (aff-fact2 (car chaine) 0 3 ) (affiche-rec (cdr chaine) ))))


;; test pour les factory de market tant que ce n'est pas achetable
;;l est la liste retournée après l'appel de end-chaine-prod
;;retourne une factory
;(define (buy-fac-rec list-achetable l)  
 ; (if (add-end-rec (car list-achetable) l)
  ;    (car list-achetable)
   ;   (buy-fac-rec (cdr list-achetable l))))


;on met les factories achetables du market dans liste-achetable en se basant uniquement sur le gold
;; on stocke dans liste-achetable la liste des factory qu'on peut acheter du market
;(define (factories-achetables market gold liste-achetable)  
 ; (if (>= gold (car market))
  ;    (cons liste-achetable (car market))
   ;   (factories-achetables (cdr market) gold liste-achetable)))

(define (aff-chaine2 chaine)
  (cond [(null? chaine) (begin (printf "WTF")(printf "\n"))]
        [(null? (cdr chaine)) (begin (aff-fact (car chaine))(printf "La chaine est morte")(printf"\n")(printf "\n"))]
        [else (begin (aff-fact (car chaine))
                     (aff-chaine2 (cdr chaine)))]))

(define (aff-chaines chaines )
 (if (null? chaines)
     (printf "fin")
     (begin (aff-chaine2 (car chaines)) (aff-chaines (cdr chaines)))))



;(aff-chaines chaine9)

(aff-chaines (car (cdr (add-end-rec addfact chaine9 gold))))



;;;;;;;;;;;;;;;;;;;REGLE 2;;;;;;;;;;;;;;;;;;;;
;;;;Tour de jeu avec la relge 2

(define (tour-jeu-r2b gold market chaines)
  (if (null? market)
      chaines
      (if (car(add-end-rec (car market) chaines gold))
         (tour-jeu-r2b (- gold (factory-cout (car market))) (cdr market) (cadr (add-end-rec (car market) chaines (- gold (factory-cout (car market))) )))
         (tour-jeu-r2b gold (cdr market) chaines))))



;;;;;;;;;;TEST;;;;;;;;;;;;;;;;;;;

(define market1 (list addfact addfact3))
(tour-jeu-r2b 50 market1 chaine9)

;(car(factory-consomation (car market1)))